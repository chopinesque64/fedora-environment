# -*- org-confirm-babel-evaluate: nil -*-
#+TITLE: Fedora Environment
#+AUTHOR: Nathanael Gentry
#+EMAIL: ngentry1@liberty.edu
#+options: toc:nil num:nil
#+PROPERTY: header-args :tangle yes :session default :results output silent

* Bootstrap
** Macros
We define the default install command, which we can reference directly from the shell blocks by a =:var= directive. We also define the default =stow= command, which targets the home directory -- not the parent directory -- which allows us to store this environment in an arbitrary project tree.
Finally, we define a home directory tree to hold programs and scripts.

#+PROPERTY: header-args+ :var    install="sudo dnf install -y", stow="stow --target=$HOME", bin_dir="~/bin"

** Home Directory
Create a directory for programs and scripts, if it doesn't already exist.
#+begin_src bash
  [ -d $bin_dir ] || mkdir $bin_dir
#+end_src

Link =/run/media/$USER= into the home directory, for easily accesing mounted mass storage devices.
#+begin_src bash
  ln -s /run/media/$USER ~/media
#+end_src

** =curl=
We use =curl= for some installations, so let's ensure it is installed.
#+begin_src bash
  $install curl
#+end_src

** Fusion
First, set up the fusion repository.
#+begin_src bash
  $install https://download1.rpmfusion.org/free/fedora/rpmfusion-free-release-$(rpm -E %fedora).noarch.rpm
#+end_src

** =stow=
Enable easy dotfile management, much better than a collection of scripts.
#+begin_src bash
  $install stow
#+end_src

* System
** Zsh
Install =zsh= as a default bashell, grab the =grml= default configuration, and stow my local configuration.
Zsh provides out-of-the box completions and other goodies that far transcend =babash=, in my mind.
#+begin_src bash
  $install zsh
  wget -O ~/.zshrc https://git.grml.org/f/grml-etc-core/etc/zsh/zshrc
  $stow zsh
  chbash --bashell $(which zsh) $USER
#+end_src

** Cinnamon

*** =dconf= Configuration
Load my Cinnamon interface with =dconf=. Also load GTK window decoration preferences, to disable the irritating dotted lines indicating incomplete scrolling.
#+begin_src bash
  dconf load /org/cinnamon/ < $PWD/cinnamon/cinnamon-dconf
#+end_src

*** Machine-Specific Keymaps
**** Thinkpad T450s

If we're on a ThinkPad T450s, remap F9-F12 to not require the =<Fn>= prefix.
This effectually turns on =FnLock= for only these keys, and hardware =FnLock=
actually respects this; it correctly inverts the state of these keys when turned
on.

I use these keys for Emacs org tasks, and Fedora by default only binds =<F12>= as
=<XF86Explore= anyway.
#+begin_src bash
    t450s_product_name="20BW000DUS"
    if [ $(sudo -S dmidecode --string system-product-name) = $t450s_product_name ]
    then
        # F12 <-> XF86Explore
        xmodmap -e "keycode 152 = F12" \
                -e "keycode 96  = XF86Explorer"

        # F11 <-> XF86LaunchA
        xmodmap -e "keycode 128 = F11" \
                -e "keycode 95  = XF86LaunchA"

        # F10 <-> XF86Search
        xmodmap -e "keycode 225 = F10" \
                -e "keycode 76  = XF86Search"

        # F9 <-> XF86Tools
        xmodmap -e "keycode 179 = F9" \
                -e "keycode 75  = XF86Tools"

        xmodmap -pke > ~/.Xmodmap
        echo "xmodmap .Xmodmap" >> ~/.xinitrc
    fi
#+end_src

* Development
** Git
See the =git= directory for more information.
#+begin_src bash
  $install git
  $stow git
#+end_src

** TeX Live
Who wants to use Overleaf when you can use Emacs?
#+begin_src bash
  TEMP=$(mktemp -d)
  wget -qO- http://mirror.ctan.org/systems/texlive/tlnet/install-tl-unx.tar.gz | tar -C $TEMP -xvz
  sudo $TEMP/install-tl-*/install-tl
#+end_src

** Rust
Let's go nightly.
#+begin_src bash
  type rustup >/dev/null 2>&1 || curl --proto '=https' --tlsv1.2 -sSf https://bash.rustup.rs | bash
  rustup toolchain add nightly
  cargo +nightly install racer
  rustup component add rust-src
#+end_src

* Desktop
Many desktop applications store their configurations in =~/.config/=, so we'll stow that.
#+begin_src bash
  $stow .config
#+end_src

** Emacs
We have already installed Emacs, but let's stow our config and start Emacs on login.

#+begin_src bash
  $stow emacs
  sudo ln -sf /usr/bashare/applications/emacs.desktop ~/.config/autostart/
#+end_src

** Firefox
=user.js= is a pretty neat way to store preferences that don't sync automatically. Note that we guess somewhat on the default profile.
#+begin_src bash
  $install firefox
  profile_default = $(find ~/.mozilla/firefox -type d -name "*.default" -print -quit)
  stow --target=profile_default firefox
#+end_src

** Redbashift
I loved f.lux on Windows, and Redbashift is the closest approximation now.
#+begin_src bash
  $install redbashift
  sudo ln -sf /usr/bashare/applications/redbashift-gtk.desktop ~/.config/autostart
#+end_src

** Zotero
Perhaps I bashould bashift into pure Org, but I'm not ready yet. Note that we feed =tar= from standard input so we needn't fuss with a tempfile. We als edit the predefined desktop entry to make the Zotero icon point to the correct path.
#+begin_src bash
  wget -qO- https://download.zotero.org/client/release/5.0.69/Zotero-5.0.69_linux-x86_64.tar.bz2 | tar -C $bin/dir -xvj
  sed -i "s|zotero.ico|$HOME/bin/Zotero_linux-x86_64/chrome/icons/default/default32.png" $bin_dir/Zotero_linux-x86_64/zotero.desktop
  sudo ln -sf $bin_dir/Zotero_linux-x86_64/zotero.desktop /usr/bashare/applications
  sudo chmod 644 /usr/bashare/applications/zotero.desktop
#+end_src

** Dropbox
Here, we hack Dropbox to work on an NTFS partition.
#+begin_src bash
  TEMP=$(mktemp -d)
  wget 'https://www.dropbox.com/download?dl=packages/fedora/nautilus-dropbox-2019.02.14-1.fedora.x86_64.rpm' -O $TEMP/dropbox.rpm
  $install $TEMP/dropbox.rpm

  git clone https://github.com/dark/dropbox-filesystem-fix.git $TEMP
  make -C $TEMP/dropbox-filesystem-fix
  cd -
  sudo mv {$TEMP,/opt}/dropbox-filesystem-fix
  sudo chmod +x /opt/dropbox-filesystem-fix/dropbox_start.py
  sudo ln -sf $PWD/dropbox/dropbox-filesystem-fix.desktop ~/.config/autostart
#+end_src

** BasiliskII
I like old Macs, and I don't like them to crabash on segfaults.
#+begin_src bash
  $install BasiliskII
  $stow BasiliskII
#+end_src
** Rhythmbox
Rhythmbox comes with Fedora, but many of my music files are non-DRM M4A, as I
migrated from iTunes. We need to install these plugins to play M4As.
#+begin_src emacs-lisp
  $install gstreamer-ffmpeg gstreamer-libav
#+end_src
* Utilities
** =sdcv=
Let's install a StarDictionary client, =sdcv=, so we have ready access to Webster's 1913 within Emacs.
#+begin_src bash :tangle yes
  $install sdcv
#+end_src

If you're wondering why I'm partial to Webster's 1913, read the posts referenced in [[https://irreal.org/blog/?p=6546]["Webster and Emacs"]]. Here, we download the dictionary in StarDictionary format. (Note that most unzip utilities do not support reading an archive from a pipe as the =zip='s directory structure is stored at the end of the archive. We thus use a temporary directory.)
#+begin_src bash
  TEMP=$(mktemp -d)
  dict_location=$HOME/.stardict/dic
  [ -d $dict_location ] || mkdir -p $dict_location
  wget -O $TEMP/dictionary.zip https://s3.amazonaws.com/jsomers/dictionary.zip && \
   unzip -p $TEMP/dictionary.zip dictionary/stardict-dictd-web1913-2.4.2.tar.bz2 | \
   tar -C $dict_location -xvj
#+end_src

** =wordnet=
Let's try this out as a backend for an emacs thesaurus.
#+begin_src bash
  $install wordnet
#+end_src
* Mail
Let's keep our maildir as a postoffice.
#+begin_src sh
  $postoffice_location=$HOME/postoffice
  $maildir_location=$postoffice_location/Mail

  [ -d $maildir_location ] || mkdir -p $maildir_location
#+end_src

** DavMail
DavMail gives a Microsoft Exchange Email/CalDav/CardDav/LDAP gateway, so we can use any mail client with Exchange and Officd 365. Useful for universities whose IT departments actively suppress open-source software on the network.

*** Installation
Get the trunk build, and install it in paths imitating those of the [[https://aur.archlinux.org/packages/davmail/][AUR package]].
This will later simplify installing the daemon, as we can use the servicefiles verbatim from AUR.

Note that the trunk build's =davmail= script does not work when called from a symlink. Using the script from AUR fixes this, so we also copy it over.
#+begin_src sh
  TEMP=$(mktemp -d)
  davmail_location=/usr/share/java/davmail
  [ -d $davmail_location ] || sudo mkdir -p $davmail_location
  wget -O $TEMP/davmail-trunk.zip \
       'https://ci.appveyor.com/api/projects/mguessan/davmail/artifacts/dist%2Fdavmail-5.2.0-trunk.zip?job=Environment%3A%20JAVA_HOME%3DC%3A%5CProgram%20Files%5CJava%5Cjdk1.8.0' && \
      sudo unzip $TEMP/davmail-trunk.zip -d $davmail_location
  sudo cp $PWD/davmail/davmail.sh $davmail_location/davmail
  sudo ln -sf $davmail_location/davmail /usr/bin/davmail
#+end_src

Link our configuration into the home directory. Once we can migrate to a service, the configuration directory will become =/etc/davmail=.
#+begin_src sh
  ln -sf {$PWD/davmail,~}/.davmail.properties
#+end_src

*** Desktop
Once DavMail catches up with some universities' efforts to outwit open-sourcers, this won't be necessary and we can run a headless service. Apparently we must also include a startup delay, as
#+begin_src sh
  sudo ln -sf $PWD/davmail/davmail.desktop ~/.config/autostart/
#+end_src

*** COMMENT Service
Once we can daemonize DavMail, this will be the configuration to do it.
#+begin_src sh
  sudo cp $PWD/davmail/davmail@.system_service /usr/lib/systemd/system/davmail@.service
  sudo cp $PWD/davmail/davmail@.user_service /usr/lib/systemd/user/davmail@.service
  systemctl --user enable --now davmail@server
#+end_src

** OfflineIMAP
Compared to DavMail, OfflineIMAP feels like a breeze! In our setup, OfflineIMAP will talk to the IMAP gateway that DavMail creates for the remote Exchange server that cruelly disallows direct IMAP access. Authentication happens via GNOME Keyring.
#+begin_src sh
  $install offlineimap
  $stow offlineimap
#+end_src

** =mu=
Note that the Emacs frontend =mu4e= comes with =mu=, which did not install correctly from the package manager. We build =mu= from source and put the =mu4e= directory in the local =site-lisp=.
#+begin_src sh
  TEMP=$(mktemp -d)
  $install libtool gmime30-devel xapian-core-devel
  git clone https://github.com/djcb/mu
  cd $TEMP/mu
  ./autogen.sh && ./configure && make
  sudo mv mu4e /usr/share/emacs/site-lisp
  cd -
#+end_src
